bno_prostitution_interval = {
  switch = {
    trigger = has_game_rule
    bno_interval_three_months = { value = 3 }
    bno_interval_six_months = { value = 6 }
    fallback = { value = 1 }
  }
}

bno_gold_amount = {
	every_ruler = {
		limit = {
			faith = root.faith
		}
		add = 1
	}
}

bno_bbc_marriage_perk_reward = {
  value = { 25 50 }
}

bno_bbc_marriage_prestige_perk_reward = {
  value = { 500 1000 }
}

bno_random_xp_positive = {
	value = { 5 15 }
}

bno_random_xp_negative = {
	value = { -15 -5 }
}

hair_color_x = {
   value = 1
   divide = var:bno_becoming_dark
   add = -0.15
}

hair_color_y = {
   value = 2
   divide = var:bno_becoming_dark
   add = -0.25
}

skin_color_x = {
  value = 0.025
  multiply = var:bno_becoming_dark
}

skin_color_y = {
  value = 0.025
  multiply = var:bno_becoming_dark
}

bno_younger_adult = {
  value = { 16 20 }
}

bno_young_adult = {
  value = { 21 39 }
}

bno_bbc_trait_occurrence_dicksize_modifier = { # Represents % chance of BBC occuring based on dicksize
  switch = {
    trigger = has_trait
    dick_big_good_3 = { value = bno_bbc_big_dick_good_3_chance }
    dick_big_good_2 = { value = bno_bbc_big_dick_good_2_chance }
    dick_big_good_1 = { value = bno_bbc_big_dick_good_1_chance }
    fallback = { value = 0 }
  }
}

bno_secrecy_base_value = {
	add = {
		value = 20
		desc = BASE
	}
	# Reduce by the target's scheme discovery chance, if appropriate.
	if = {
		limit = {
			# Scheme has to exist already.
			exists = this
			# We gotta be facing a character.
			is_scheme_target_type = character
			# Do they have a spymaster...
			scheme_target_character.cp:councillor_spymaster ?= {
				# ... who is performing the appropriate task...
				is_performing_council_task = task_disrupt_schemes
				NOR = {
					# ... who _isn't_ the scheme owner...
					this = scope:owner
					# ... or an agent in the scheme.
					save_temporary_scope_as = char_temp
					root = {
						any_scheme_agent_character = { this = scope:char_temp }
					}
				}
			}
		}
		add = {
			value = scope:target.cp:councillor_spymaster.spymaster_disrupt_schemes_total_modifier
			multiply = -1
			desc = secrecy.scheme_owner.spymaster.disrupt_schemes
		}
	}
}